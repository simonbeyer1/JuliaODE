pkgname <- "JuliaODE"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
base::assign(".ExTimings", "JuliaODE-Ex.timings", pos = 'CheckExEnv')
base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
base::assign(".format_ptime",
function(x) {
  if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
  if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
  options(OutDec = '.')
  format(x[1L:3L], digits = 7L)
},
pos = 'CheckExEnv')

### * </HEADER>
library('JuliaODE')

base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
cleanEx()
nameEx("generateJuliaODE")
### * generateJuliaODE

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: generateJuliaODE
### Title: Generate and Save Julia ODE Model and Create ODEProblem
### Aliases: generateJuliaODE

### ** Examples

## Not run: 
##D # Define a Lotka-Volterra system
##D LV <- c(
##D   N = "N * (a - b * P)",
##D   P = "P * (c * N - d)"
##D )
##D 
##D # Define initial values, parameters, and time points
##D x0 <- c(N = 10, P = 5)
##D params <- c(a = 0.5, b = 0.02, c = 0.1, d = 0.3)
##D times <- seq(0, 10, by = 0.1)
##D 
##D # Generate the Julia ODE model and precompile the ODEProblem
##D problem <- generateJuliaODE(
##D   LV,
##D   modelname = "LotkaVolterra",
##D   x0 = x0,
##D   times = times,
##D   params = params,
##D   problem_file = "LotkaVolterraProblem.jls"
##D   )
##D 
##D # stop Julia
##D JuliaConnectoR::stopJulia()
## End(Not run)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("generateJuliaODE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("solveODE")
### * solveODE

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: solveODE
### Title: Solve an ODEProblem Using Julia
### Aliases: solveODE

### ** Examples

## Not run: 
##D # Define a Lotka-Volterra system
##D LV <- c(
##D   N = "N * (a - b * P)",
##D   P = "P * (c * N - d)"
##D )
##D 
##D # Define initial values, parameters, and time points
##D x0 <- c(N = 10, P = 5)
##D params <- c(a = 0.5, b = 0.02, c = 0.1, d = 0.3)
##D times <- seq(0, 10, by = 0.1)
##D 
##D # Generate the Julia ODE model
##D problem <- generateJuliaODE(
##D   LV,
##D   modelname = "LotkaVolterra",
##D   x0 = x0,
##D   times = times,
##D   params = params
##D   )
##D 
##D # Solve the problem
##D solution <- solveODE(problem, times = times)
##D head(solution)
##D 
##D # Stop Julia session
##D JuliaConnectoR::stopJulia()
## End(Not run)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("solveODE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
### * <FOOTER>
###
cleanEx()
options(digits = 7L)
base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
grDevices::dev.off()
###
### Local variables: ***
### mode: outline-minor ***
### outline-regexp: "\\(> \\)?### [*]+" ***
### End: ***
quit('no')
