# JuliaODEmodel: Generating Julia Code for ODE Models from R

`JuliaODEmodel` is an R package that automatically generates Julia code for solving ordinary differential equations (ODEs). It translates ODE models into Julia, solves them, and calculates sensitivities (Jacobian) if needed. It offers seamless integration with Julia through the `JuliaConnectoR` package.

## Installation

### Prerequisites

- R (version 4.0.0 or higher)
- [Julia](https://julialang.org/downloads/) (version 1.6 or higher)
- The `JuliaConnectoR` package must be installed in R to communicate with Julia.

### Installing the Package

Install the package from GitHub using `devtools`:

```r
# Install devtools if not already installed
install.packages("devtools")

# Install the JuliaODEmodel package from GitHub
devtools::install_github("simonbeyer1/JuliaODEmodel")
```

## Usage

### Function: `juliaODEmodel`

The main function of the package is `juliaODEmodel`, which generates Julia code for a given ODE model.

#### Syntax

```r
juliaODEmodel(odefunction, modelname = "odemodel", file = paste0(modelname, ".jl"), events = NULL)
```

#### Arguments

- **odefunction**: A named list where the names are the dynamic variables and the values are the corresponding ODEs as strings.
- **modelname**: The name of the Julia model function. Default is `"odemodel"`.
- **file**: The filename where the generated Julia code will be saved. By default, the name is generated based on the model name (`paste0(modelname, ".jl")`).
- **events**: An optional DataFrame that contains events that should occur at specific times. The DataFrame must contain the columns `"var"`, `"time"`, `"value"`, and `"method"`.

#### Return Value

An object with the following attributes:

- `"equations"`: The ODE equations.
- `"variables"`: The dynamic variables in the system.
- `"parameters"`: The parameters in the system.
- `"events"`: The events DataFrame, if provided.
- `"modelname"`: The name of the generated Julia model.
- `"juliacode"`: The generated Julia code.

The returned object also includes two methods:

- `solve(x0, dynpars, times, solver = "AutoTsit5(Rosenbrock32())", atol = 1e-8, rtol = 1e-6)`: Solves the ODE system.
- `senssolve(x0, dynpars, times, solver = "AutoTsit5(Rosenbrock32())", atol = 1e-8, rtol = 1e-6)`: Solves the ODE system and computes sensitivities (Jacobian).

#### Example

```r
# Example ODE model (A -> B -> 0) with rates k1 and k2, where A is time-dependent
odefunction <- list(
  A = "-k1 * A * t",
  B = "k1 * A - k2 * B"
)

# Define events with expressions in 'value'
events <- data.frame(
  var = c("A", "B"),
  time = c(50, 70),
  value = c("0.5 * A", "k2"),
  method = c("add", "rep"),
  stringsAsFactors = FALSE
)

# Generate the Julia model
odemodel <- juliaODEmodel(odefunction, modelname = "reaction_model", events = events)

# Initial conditions and parameters
x0 <- c(A = 1, B = 0)
dynpars <- c(k1 = 0.1, k2 = 0.05)
times <- seq(0, 100, by = 1)

# Solve the ODE system without sensitivities
solution <- odemodel$solve(x0, dynpars, times)
print(head(solution))

# Solve the ODE system with sensitivities
solution_sens <- odemodel$senssolve(x0, dynpars, times)
print(head(solution_sens))



# Plot the solution
library(reshape2)
library(ggplot2)
out_sens <- melt(as.data.frame(out_sens), id.vars = "time", variable.name = "name", value.name = "value")
ggplot(out, aes(x = time, y = value, color = name)) +
  geom_line() +
  facet_wrap(~ name, scales = "free_y") +
  labs(
    x = "time",
    y = "value",
    color = "Variable"
  ) +
  dMod::theme_dMod() +
  dMod::scale_color_dMod()

```

### Events

If you have events in your model, you can define them using the `events` DataFrame. Each event includes:

- `var`: The affected variable.
- `time`: The time at which the event should be triggered.
- `value`: The value to assign to the variable.
- `method`: The event method: `"add"`, `"mult"`, or `"rep"` (replace).

The package supports adding, multiplying, or replacing variable values at specific times.

## Notes

- If you have not installed Julia yet, follow the [installation instructions on the Julia website](https://julialang.org/downloads/).
- The `JuliaConnectoR` library enables communication between R and Julia. Make sure it is properly set up.

## License

This package is licensed under the [MIT License](LICENSE).

---

The `JuliaODEmodel` package offers a convenient way to implement and solve ODE models in Julia while still taking advantage of R's flexibility and ecosystem. Enjoy modeling!
```
