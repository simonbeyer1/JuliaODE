% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JuliaODE.R
\name{odemodelJL}
\alias{odemodelJL}
\title{Generate ODE model object that delivers Julia integration methods}
\usage{
odemodelJL(
  odefunction,
  modelname = "odemodel",
  file = paste0(modelname, ".jl"),
  events = NULL
)
}
\arguments{
\item{odefunction}{A named list where names are the dynamic variables and values are the corresponding ODEs written as strings.}

\item{modelname}{A character string specifying the name of the generated Julia model function. Default is "odemodel".}

\item{file}{A character string specifying the filename where the generated Julia code will be saved. Default is constructed as paste0(modelname, ".jl").}

\item{events}{An optional data frame specifying events to occur at certain times. It must contain the columns: "var", "time", "value", and "method". The "value" column can contain expressions involving dynamic variables and parameters (e.g., "0.5 * A", "k2").}
}
\value{
An object with attributes:
\itemize{
\item "equations": The ODE equations passed to the function.
\item "variables": The dynamic variables in the system.
\item "sensvariables": The labels of the derivatives. E.g. Prey.alpha for \eqn{\partial \text{Prey} /\partial alpha}
\item "parameters": The parameters in the system.
\item "events": The events data frame, if provided.
\item "modelname": The name of the generated Julia model.
\item "juliacode": The generated Julia code.
}

The returned object contains two methods:
\itemize{
\item $solve(inits, dynpars, times, optionsOde = NULL): Solves the ODE system.
\item $senssolve(inits, dynpars, times, optionsOde = NULL): Solves the ODE system and computes sensitivities \eqn{\partial x(t,p) /\partial p}.
}
}
\description{
This function generates Julia code to solve ordinary differential equation (ODE) models
\deqn{\displaystyle \dot{x} = f(x, p)\,, \quad x(t = t_0) = x_0(p)\,,}
along with supporting functions for integration and Jacobian computation. The function
automatically translates an equation list into Julia syntax and writes the resulting code
to a file. It also creates an interface for solving ODEs and computing the Jacobian
\eqn{\partial x(t,p) /\partial p}
from R using the JuliaCall package.
}
\examples{
\dontrun{
# Define ODE system
odefunction <- list(
  Prey = "alpha * Prey - beta * Prey * Predator",
  Predator = "delta * Prey * Predator - gamma * Predator"
)

# Define events
events <- data.frame(
  var = c("Prey", "Predator"),
  time = c(50, 100),
  value = c("2 * Prey", "Predator / 2"),
  method = c("add", "replace")
)

# Generate the Julia model
odemodel <- odemodelJL(odefunction, modelname = "LotkaVolterra", events = events)

# Initial conditions and parameters
inits <- c(Prey = 40, Predator = 9)
params <- c(alpha = 0.1, beta = 0.02, delta = 0.01, gamma = 0.1)
times <- seq(0, 200, length.out = 500)

# Solve the ODE system without sensitivities
solution <- odemodel$solve(inits, params, times)
print(head(solution))

# Solve the ODE system with sensitivities
solution_sens <- odemodel$senssolve(inits, params, times)
print(head(solution_sens))
}
}
