setwd("/home/simon/Documents/Projekte/test_juliaode")
# library(JuliaODE)

# Define an example ODE system (A -> B -> 0) with rates k1 and k2, where A is time-dependent
odefunction <- list(
  A = "-k1 * A * t",
  B = "k1 * A - k2 * B"
)

# Define events with expressions in 'value'
events <- data.frame(
  var = c("A", "B"),
  time = c(50, 70),
  value = c("0.5 * A", "k2"),
  method = c("add", "rep"),
  stringsAsFactors = FALSE
)

# Generate the Julia model
odemodel <- juliaODEmodel(odefunction, modelname = "reaction_model", events = events)

# Initial conditions and parameters
x0 <- c(A = 1, B = 0)
dynpars <- c(k1 = 0.1, k2 = 0.05)
times <- seq(0, 100, by = 1)

# Lösen des ODE-Modells
out <- odemodel$solve(x0, dynpars, times) # ohne Sensitivitäten
out_sens <- odemodel$senssolve(x0, dynpars, times) # mit Sensitivitäten



library(reshape2)
out <- melt(as.data.frame(out), id.vars = "time", variable.name = "name", value.name = "value")
out_sens <- melt(as.data.frame(out_sens), id.vars = "time", variable.name = "name", value.name = "value")


library(ggplot2)

# plotting the solution
ggplot(out, aes(x = time, y = value, color = name)) +
  geom_line() +
  facet_wrap(~ name, scales = "free_y") +
  labs(
    x = "time",
    y = "value",
    color = "Species"
  ) +
  dMod::theme_dMod() +
  dMod::scale_color_dMod()



# plotting the sensitivities
ggplot(out_sens, aes(x = time, y = value)) +
  geom_line() +
  facet_wrap(~ name, scales = "free_y") +
  labs(
    x = "time",
    y = "Derivative value"
  ) +
  dMod::theme_dMod() +
  dMod::scale_color_dMod()





# Define an example ODE system (A -> B -> 0) with rates k1 and k2
odefunction <- list(
  Prey = "alpha * Prey - beta * Prey * Predator",
  Predator = "delta * Prey * Predator - gamma * Predator"
)


# Generate the Julia model
odemodel <- juliaODEmodel(odefunction, modelname = "LotkaVolterra")

# Initial conditions and parameters
inits <- c(Prey = 40, Predator = 9)
params <- c(alpha = 0.1, beta = 0.02, delta = 0.01, gamma = 0.1)
times <- seq(0, 200, length.out = 500)


# Solve the ODE system
out <- odemodel$solve(inits, params, times, solver = "Tsit5()")
jac <- odemodel$senssolve(inits, params, times, solver = "Tsit5()")


library(reshape2)
out <- melt(as.data.frame(out), id.vars = "time", variable.name = "name", value.name = "value")
jac <- melt(as.data.frame(jac), id.vars = "time", variable.name = "name", value.name = "value")


library(ggplot2)

# plotting the solution
ggplot(out, aes(x = time, y = value, color = name)) +
  geom_line() +
  facet_wrap(~ name, scales = "free_y") +
  labs(
    x = "time",
    y = "value",
    color = "Species"
  ) +
  dMod::theme_dMod() +
  dMod::scale_color_dMod()



# plotting the sensitivities
ggplot(jac, aes(x = time, y = value)) +
  geom_line() +
  facet_wrap(~ name, scales = "free_y") +
  labs(
    x = "time",
    y = "Derivative value"
  ) +
  dMod::theme_dMod() +
  dMod::scale_color_dMod()
